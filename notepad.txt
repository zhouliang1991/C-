#知识点总结
01####################
代码区：二进制代码，由操作系统进行管理 
全局区:全局变量,静态变量，常量
栈区：编译器分配释放，如函数的参数值和局部变量
堆区：程序员分配和释放

不同区域数据 生命周期不同，灵活编程

1.1 程序运行前
    在程序编译后，生成exe可执行程序，在未执行程序前分为两区：
    代码区：存放CPU执行的指令
            代码区共享的
	    代码区只读的

    全局区：全局变量和静态变量(static int)
            还包含常量区，字符串常量("字符串常量")和其他常量(const修饰的全局变量，在常常量区，const 修饰的局部变量不在常量区)
	    该区域在程序结束由操作系统释
1.2 程序运行后
    栈区：
    	栈区注意事项---不要返回局部变量的地址。局部变量在栈上，栈区的数据在返回就释放了。
    	栈区的数据由编译器管理开辟和释放
    堆区：
    	C++ 用 new 开辟 delete 释放
2.引用
2.1 基本用法
  给变量起别名。 语法： 数据类型 & 别名 = 原名(int & b = a)
2.2 注意事项
  引用必须初始化
  引用一旦初始化后，就不可以更改
2.3 引用做函数参数
   可以简化指针修饰实参
2.4 引用做函数返回值
   不要返回局部变量的引用
   函数的调用可以作为左值。函数的返回值是引用
2.5 引用的本质
   引用的本质在C++内部实现就是一个指针常量 int &ref = a 相当于 int * const ref = &a;

2.6 常量引用
    防止形参改变

3 函数提高
3.1函数默认参数
  声明和实现只能有一个有默认参数
3.2 函数占位参数
3.3 函数重载
   函数名可以相同，提高复用性

   满足条件：同一个作用域下
             函数名称相同
	     函数参数类型不同，或者个数不同 或者顺序不同
    注意事项：引用作为重载条件(const 和不加const的)
              函数重载碰到默认参数
4 类和对象
  封装、继承、多态

4.1 封装
    属性和行为作为一个整体
    权限控制
4.1.2 struct 和 class区别
    默认访问权限不同，struct 默认public，class默认 private
4.1.3 程序属性设置为私有
     可以控制读写权限
     可以监测数据有效性
4.2 对象的初始化和清理
4.2.1 构造函数和析构函数
     构造函数：没有返回值，与类名相同，可以重载，自动调用
     析构函数: 没有返回值，~，不可以有参数，销毁前自动调用





